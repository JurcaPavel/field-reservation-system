schema {
  query: Query
  mutation: Mutation
}

type Query {
  reservation(id: ID!): Reservation
  reservations(
    filters: ReservationFiltersInput,
    pagination: PaginationInput!,
  ): ReservationsWrapper!
  sportsField(id: ID!): SportsFieldResult!
  sportsFields(
    filters: SportsFieldFiltersInput,
    pagination: PaginationInput!,
    sortBy: SportsFieldSortByInput
  ): SportsFieldsWrapper!
}

type Mutation {
  cancelReservation(id: ID!): CancelReservationResult!
  createReservation(input: CreateReservationInput!): CreateReservationResult!
  editReservation(id: ID!, input: EditReservationInput!): EditReservationResult!
  createSportsField(input: CreateSportsFieldInput!): CreateSportsFieldResult!
  deleteSportsField(id: ID!): DeleteSportsFieldResult!
  editSportsField(id: ID!, input: EditSportsFieldInput!): EditSportsFieldResult!
}

#
# Sports Field
#

type SportsField {
  id: ID!
  name: String!
  sportTypes: [SportType!]!
  coordinates: Coordinates!
  city: String!
  street: String
  zipCode: String!
  country: Country!
  description: String
}

type Country {
  code: String!
  name: String!
}

input CreateSportsFieldInput {
  name: String!
  coordinates: CoordinatesInput!
  city: String!
  street: String!
  zipCode: String!
  countryCode: String!
  sportTypes: [SportType!]!
  description: String
}

input EditSportsFieldInput {
  name: String!
  coordinates: CoordinatesInput!
  city: String!
  street: String!
  zipCode: String!
  countryCode: String!
  sportTypes: [SportType!]!
  description: String
}

input SportsFieldFiltersInput {
  city: String
  countryCode: String
  sportTypes: [SportType!]
}

input SportsFieldSortByInput {
  field: SportsFieldSortByField!
  direction: SortByDirection!
}

enum SportsFieldSortByField {
  NAME
  SPORT_TYPE
}

union SportsFieldResult = SportsField | NotFoundError

type SportsFieldsWrapper {
  sportsFields: [SportsField!]!
  paginationInfo: PaginationInfo!
}

union CreateSportsFieldResult = SportsField | NotManagerOrAdminError

union DeleteSportsFieldResult = Success | NotFoundError | NotResourceOwnerError | NotManagerOrAdminError

union EditSportsFieldResult = SportsField | NotFoundError | NotResourceOwnerError

#
# Reservation
#

type Reservation {
  id: ID!
  sportsFieldId: ID!
  startTime: String!
  endTime: String!
  userId: ID!
  additionalInfo: String
}

type ReservationsWrapper {
  reservations: [Reservation!]!
  paginationInfo: PaginationInfo!
}

input CreateReservationInput {
  sportsFieldId: ID!
  startTime: String!
  endTime: String!
  additionalInfo: String
}

input EditReservationInput {
  startTime: String!
  endTime: String!
  additionalInfo: String
}

input ReservationFiltersInput {
  userId: ID
  sportsFieldId: ID!
  startTime: String!
  endTime: String!
}

union CancelReservationResult = Success | NotFoundError | NotResourceOwnerError | PastReservationCancellationError

union CreateReservationResult = Reservation | AlreadyReservedError

union EditReservationResult = Reservation | NotFoundError | NotResourceOwnerError

type AlreadyReservedError {
  message: String!
}

type PastReservationCancellationError {
  message: String!
}

#
# Location
#

type Coordinates {
  latitude: Float!
  longitude: Float!
}

input CoordinatesInput {
  latitude: Float!
  longitude: Float!
}

#
# Common Types
#

enum SportType {
  BASKETBALL
  BEACH_VOLLEYBALL
  SOCCER
  TENNIS
}

input PaginationInput {
  pageNumber: Int!
  pageSize: Int!
}

type PaginationInfo {
  itemsTotalCount: Int!
}

type Success {
  message: String!
}

enum SortByDirection {
  ASC
  DESC
}

type NotFoundError {
  message: String!
}

type NotManagerOrAdminError {
  message: String!
}

type NotResourceOwnerError {
  message: String!
}
