schema {
  query: Query
  mutation: Mutation
}

type Query {
  sportsField(id: ID!): SportsField!
  sportsFields(
    filters: SportsFieldFiltersInput,
    pagination: PaginationInput!,
    sortBy: [SportsFieldSortByInput!]
  ): SportsFieldsWrapper!
}

type Mutation {
  createSportsField(input: CreateSportsFieldInput!): SportsField!
  editSportsField(id: ID!, input: EditSportsFieldInput!): SportsField!
}

#
# Sports Field
#

type SportsField {
  id: ID!
  name: String!
  sportTypes: [SportType!]!
  coordinates: Coordinates!
  city: String!
  street: String!
  zipCode: String!
  countryCode: String!
}

input CreateSportsFieldInput {
  name: String!
  coordinates: CoordinatesInput!
  city: String!
  street: String!
  zipCode: String!
  countryCode: String!
}

input EditSportsFieldInput {
  name: String!
  coordinates: CoordinatesInput!
  city: String!
  street: String!
  zipCode: String!
  countryCode: String!
}

input SportsFieldFiltersInput {
  city: String
  countryCode: String
  sportTypes: [SportType!]
}

input SportsFieldSortByInput {
  field: SportsFieldSortByField!
  direction: SortByDirection!
}

enum SportsFieldSortByField {
  NAME
  SPORT_TYPE
}

type SportsFieldsWrapper {
  sportsFields: [SportsField!]!
  paginationInfo: PaginationInfo!
}

#
# Location
#

type Coordinates {
  latitude: Float!
  longitude: Float!
}

input CoordinatesInput {
  latitude: Float!
  longitude: Float!
}

#
# Common Types
#

enum SportType {
  BASKETBALL
  BEACH_VOLLEYBALL
  SOCCER
  TENNIS
}

input PaginationInput {
  pageNumber: Int!
  pageSize: Int!
}

type PaginationInfo {
  itemsTotalCount: Int!
}

enum SortByDirection {
  ASC
  DESC
}
